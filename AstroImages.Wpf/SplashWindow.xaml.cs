using System.Windows;

namespace AstroImages.Wpf
{
    /// <summary>
    /// Splash Screen Window - displays application info and welcome message on startup.
    /// Inherits from Window which provides basic window functionality (title bar, close button, etc.).
    /// The "partial" keyword means this class works with SplashWindow.xaml to define the UI.
    /// </summary>
    public partial class SplashWindow : Window
    {
        /// <summary>
        /// Property to track if user checked "Don't show this again".
        /// Public get (anyone can read) but private set (only this class can change it).
        /// This is called an "auto-property" - C# automatically creates the backing field.
        /// </summary>
        public bool DontShowAgain { get; private set; }

        /// <summary>
        /// Constructor - called when creating a new SplashWindow instance.
        /// This runs before the window is displayed.
        /// </summary>
        public SplashWindow()
        {
            // InitializeComponent() is generated by WPF - it loads the XAML layout
            // and connects event handlers. Always call this first in WPF constructors.
            InitializeComponent();
            
            // Set the current year for the copyright notice
            CopyrightYear.Text = DateTime.Now.Year.ToString();
        }

        /// <summary>
        /// Event handler for the OK button click.
        /// In WPF, event handlers follow the pattern: (object sender, EventArgs e)
        /// sender = the control that triggered the event (the OK button)
        /// e = additional information about the event
        /// </summary>
        /// <param name="sender">The button that was clicked</param>
        /// <param name="e">Event arguments with details about the click</param>
        private void OkButton_Click(object sender, RoutedEventArgs e)
        {
            // Get the checkbox state - IsChecked can be true, false, or null (for indeterminate)
            // The ?? operator means "if left side is null, use right side"
            // So if IsChecked is null, we treat it as false
            DontShowAgain = DontShowAgainCheckBox.IsChecked ?? false;
            
            // Set DialogResult to true - this tells the calling code that user clicked OK
            // When ShowDialog() is used, it returns this DialogResult value
            this.DialogResult = true;
            
            // Close the window - this will return control to the calling code
            this.Close();
        }
    }
}